diff --git a/meson.build b/meson.build
index d45ac05..4d619e9 100644
--- a/meson.build
+++ b/meson.build
@@ -258,11 +258,4 @@ config_h_include = include_directories('.')
 
 # Subdirs
 subdir('src')
-subdir('common')
-subdir('tools')
-if not get_option('test').disabled()
-  subdir('test')
-endif
-if doxygen.found()
-  subdir('doc')
-endif
+subdir('common')
\ No newline at end of file
diff --git a/src/openslide-decode-tifflike.c b/src/openslide-decode-tifflike.c
index fb254c8..1c3c976 100644
--- a/src/openslide-decode-tifflike.c
+++ b/src/openslide-decode-tifflike.c
@@ -698,8 +698,6 @@ static void print_tag(struct _openslide_tifflike *tl,
   struct tiff_item *item = get_item(tl, dir, tag);
   g_assert(item != NULL);
 
-  printf(" %d: type: %d, count: %"PRId64"\n ", tag, item->type, item->count);
-
   switch (item->type) {
   case TIFF_ASCII: {
     // will only print first string if there are multiple
diff --git a/src/openslide-file.c b/src/openslide-file.c
index 20f53a8..3f0dcd2 100644
--- a/src/openslide-file.c
+++ b/src/openslide-file.c
@@ -23,11 +23,12 @@
 #include <config.h>
 
 #include "openslide-private.h"
-
+#include <unistd.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <string.h>
 #include <errno.h>
+#include <emscripten.h>
 #include <glib.h>
 
 #ifndef _WIN32
@@ -38,6 +39,7 @@
 struct _openslide_file {
   FILE *fp;
   char *path;
+  bool isRemote;
 };
 
 struct _openslide_dir {
@@ -62,86 +64,198 @@ static void io_error(GError **err, const char *fmt, ...) {
   va_end(ap);
 }
 
-static FILE *do_fopen(const char *path, const char *mode, GError **err) {
-  FILE *f;
 
-#ifdef _WIN32
-  g_autofree wchar_t *path16 =
-    (wchar_t *) g_utf8_to_utf16(path, -1, NULL, NULL, err);
-  if (path16 == NULL) {
-    g_prefix_error(err, "Couldn't open %s: ", path);
-    return NULL;
-  }
-  g_autofree wchar_t *mode16 =
-    (wchar_t *) g_utf8_to_utf16(mode, -1, NULL, NULL, err);
-  if (mode16 == NULL) {
-    g_prefix_error(err, "Bad file mode %s: ", mode);
-    return NULL;
-  }
-  f = _wfopen(path16, mode16);
-  if (f == NULL) {
-    io_error(err, "Couldn't open %s", path);
-  }
-#else
-  f = fopen(path, mode);  // ci-allow
-  if (f == NULL) {
-    io_error(err, "Couldn't open %s", path);
-  }
-#endif
+/** Remote read emscripten callbacks **/
+EM_ASYNC_JS(int, remote_open, (void* path, int* error), {
+    const BLOCK_SIZE = 150000;
+    if (!Module.fileHandleMap) Module.fileHandleMap = {};
+    const handle = Object.keys(Module.fileHandleMap).length + 1;
+    let url = "";
+    let i = 0;
+    while (Module.HEAP8[path + i] !== 0) {
+        url += String.fromCharCode(Module.HEAP8[path + i]);
+        i++;
+    }
+    const res = await fetch(url, {
+      method: "HEAD"
+    });
+    let contentLength = res.headers.get("Content-Length");
+    contentLength = contentLength ? parseInt(contentLength, 10) : null;
+    if (!res.ok || !contentLength) {
+      Module.HEAP32[error / 4] = -1;
+      return -1;
+    }
+    const numBlocks = Math.ceil(contentLength / BLOCK_SIZE);
+    const blocks = [];
+    for (let i = 0; i < numBlocks; i++) blocks.push(null);
+    Module.fileHandleMap[handle] = {
+      url,
+      position: 0,
+      size: contentLength,
+      blocks
+    };
+    Module.HEAP32[error / 4] = 0;
+    return handle;
+});
+
+bool has_http_prefix(const char *str) {
+    return strncmp(str, "http", 4) == 0;
+}
 
-  return f;
+int do_fopen(const char *path, const char *mode, GError **err) {
+  int* status = malloc(sizeof(int));
+  int result = remote_open(path, status);
+  
+  if (result <= 0 || *status < 0) {
+    io_error(err, "Couldn't open %s %s", path, mode);
+    free(status);
+    return 0;
+  }
+  free(status);
+  return result;
 }
 
 struct _openslide_file *_openslide_fopen(const char *path, GError **err)
 {
-  g_autoptr(FILE) f = do_fopen(path, "rb" FOPEN_CLOEXEC_FLAG, err);
-  if (f == NULL) {
-    return NULL;
-  }
+  char *new_path = strdup(path);
+  int f = do_fopen(new_path, "rb" FOPEN_CLOEXEC_FLAG, err);
+  struct _openslide_file *file = calloc(1, sizeof(struct _openslide_file));
+  file->fp = (FILE*)f;
+  file->path = strdup(new_path);
+  file->isRemote = true;
+  free(new_path);
+  return file;
 
-  /* Unnecessary if FOPEN_CLOEXEC_FLAG is non-empty, but compile-checked */
-#ifndef _WIN32
-  if (!FOPEN_CLOEXEC_FLAG[0]) {
-    int fd = fileno(f);
-    if (fd == -1) {
-      io_error(err, "Couldn't fileno() %s", path);
-      return NULL;
-    }
-    long flags = fcntl(fd, F_GETFD);
-    if (flags == -1) {
-      io_error(err, "Couldn't F_GETFD %s", path);
-      return NULL;
+}
+
+
+EM_ASYNC_JS(size_t, remote_read, (int handle, bool exact, void* buf, size_t size, int* error), {
+  const MULTIPLE_RANGE_REQUEST_ENABLED = false;
+  const BLOCK_SIZE = 15e4;
+  const file = Module.fileHandleMap[handle];
+  if (!file) {
+    Module.HEAP32[error / 4] = -1;
+    return;
+  }
+  if ((file.position + size) > file.size) {
+    size = file.size - file.position;
+  }
+  const startBlock = Math.floor(file.position / BLOCK_SIZE);
+  const endBlock = Math.floor((file.position + size) / BLOCK_SIZE);
+  const blocksToFetch = [];
+  for (let i = startBlock; i <= endBlock; i++) {
+    if (file.blocks[i] === null) {
+      blocksToFetch.push(i);
     }
-    if (fcntl(fd, F_SETFD, flags | FD_CLOEXEC)) {
-      io_error(err, "Couldn't F_SETFD %s", path);
-      return NULL;
+  }
+
+  if (blocksToFetch.length > 0) {
+    if (blocksToFetch.length > 1  && MULTIPLE_RANGE_REQUEST_ENABLED) {
+      const response = await fetch(file.url, {
+        method: "GET",
+        headers: {
+          "Range": 'bytes=' + blocksToFetch.map(d => { return `${d * BLOCK_SIZE}-${(d + 1) * BLOCK_SIZE - 1}`}).join(",")
+        }
+      });
+      if (!response.ok) {
+        Module.HEAP32[error / 4] = -2;
+        return;
+      }
+      const rawBuffer = await response.arrayBuffer();
+      const rawText = new TextDecoder().decode(rawBuffer); 
+      const contentType = response.headers.get("Content-Type");
+      const boundaryMatch = contentType.match(/boundary=(.+)/);
+      if (!boundaryMatch) {
+          throw new Error("Invalid multipart response: No boundary found");
+      }
+      const boundary = `--${boundaryMatch[1]}`;
+      const parts = rawText.split(boundary).slice(1, -1);
+      const extractedData = parts.map((part) => {
+          const [_, body] = part.split("\r\n\r\n");
+          const binaryData = new TextEncoder().encode(body.trim());
+          return binaryData;
+      });
+      for (let i = 0; i < extractedData.length; i++) {
+        file.blocks[blocksToFetch[i]] = {
+          data: extractedData[i]
+        };
+      }
+    } else {
+      const response = await Promise.all(blocksToFetch.map(d => {
+        return fetch(file.url, {
+          method: "GET",
+          headers: {
+            "Range": 'bytes=' + `${d * BLOCK_SIZE}-${(d + 1) * BLOCK_SIZE - 1}`
+          }
+        });
+      }));
+      for (let i = 0; i < response.length; i++) {
+        if (!response[i].ok) {
+          Module.HEAP32[error / 4] = -2;
+          return;
+        }
+        const rawBuffer = await response[i].arrayBuffer();
+        file.blocks[blocksToFetch[i]] = {
+          data: rawBuffer
+        }
+      }
     }
   }
-#endif
 
-  struct _openslide_file *file = g_new0(struct _openslide_file, 1);
-  file->fp = g_steal_pointer(&f);
-  file->path = g_strdup(path);
-  return file;
-}
+  const arrayBuffer = new ArrayBuffer(size);
+  const arrayView = new Uint8Array(arrayBuffer);
+  for (let i = startBlock; i <= endBlock; i++) {
+    const posOfBlock = i * BLOCK_SIZE;
+    const posOfStart = file.position;
+    const startReadIdx = Math.max(0, posOfStart - posOfBlock);
+    const stopReadIdx = Math.min(file.position + size - posOfBlock, BLOCK_SIZE);
+    const subset = file.blocks[i].data.slice(startReadIdx, stopReadIdx);
+    const positionOfReadInBlock = (posOfBlock + startReadIdx);
+    const posInArr = positionOfReadInBlock - file.position;
+    arrayView.set(new Uint8Array(subset), posInArr);
+  }
+  if (exact && arrayBuffer.byteLength !== size) {
+    Module.HEAP32[error / 4] = -3;
+    return;
+  }
+  const bufferView = new Uint8Array(arrayBuffer);
+  const newBuffer = new Uint8Array(Module.HEAPU8.buffer, buf, size);
+  newBuffer.set(bufferView);
+  file.position += size;
+  Module.HEAP32[error / 4] = 0;
+  return size;
+});
+
 
 // returns 0/NULL on EOF and 0/non-NULL on I/O error
 size_t _openslide_fread(struct _openslide_file *file, void *buf, size_t size,
                         GError **err) {
-  char *bufp = buf;
-  size_t total = 0;
-  while (total < size) {
-    size_t count = fread(bufp + total, 1, size - total, file->fp);  // ci-allow
-    if (count == 0) {
-      break;
+  
+  if (file->isRemote) {
+    int* e = malloc(sizeof(int));
+    size_t total = remote_read((int)file->fp, false, buf, size, e);
+    if (total == 0 && *e < 0) {
+      g_set_error(err, G_FILE_ERROR, G_FILE_ERROR_IO,
+                  "I/O error reading file %s", file->path);
     }
-    total += count;
-  }
-  if (total == 0 && ferror(file->fp)) {
-    g_set_error(err, G_FILE_ERROR, G_FILE_ERROR_IO,
-                "I/O error reading file %s", file->path);
+    free(e);
+    return total;
+  } else {
+    char *bufp = buf;
+    size_t total = 0;
+    while (total < size) {
+      size_t count = fread(bufp + total, 1, size - total, file->fp);  // ci-allow
+      if (count == 0) {
+        break;
+      }
+      total += count;
+    }
+    if (total == 0 && ferror(file->fp)) {
+      g_set_error(err, G_FILE_ERROR, G_FILE_ERROR_IO,
+                  "I/O error reading file %s", file->path);
+    }
+    return total;
   }
-  return total;
 }
 
 bool _openslide_fread_exact(struct _openslide_file *file,
@@ -160,23 +274,95 @@ bool _openslide_fread_exact(struct _openslide_file *file,
   return true;
 }
 
+EM_JS(void, remote_seek, (int handle, size_t offset, int whence, int* error, int set, int end, int cur), {
+  const file = Module.fileHandleMap[handle];
+  if (!file) {
+    Module.HEAP32[error/4] = -1;
+    return;
+  }
+  let newPos;
+  if (whence === set) {
+    newPos = offset;
+  } else if (whence === end) {
+    if (offset > file.size) {
+      Module.HEAP32[error/4] = -3;
+      return;
+    }
+    newPos = file.size + offset;
+  } else if (whence === cur) {
+    newPos = file.position + offset;
+  } else {
+    Module.HEAP32[error/4] = -2;
+    return;
+  }
+  if (newPos < 0 || newPos > file.size) {
+    Module.setValue(errorPtr, -3, 'i32'); // Out of range
+    return;
+  }
+  file.position = newPos;
+  Module.HEAP32[error/4] = 0;
+});
+
 bool _openslide_fseek(struct _openslide_file *file, off_t offset, int whence,
                       GError **err) {
-  if (fseeko(file->fp, offset, whence)) {  // ci-allow
-    io_error(err, "Couldn't seek file %s", file->path);
-    return false;
+  if (file->isRemote) {
+    int* e = malloc(sizeof(int));
+    remote_seek((int)file->fp, offset, whence, e, SEEK_SET, SEEK_END, SEEK_CUR);
+    if (e < 0) {  // ci-allow
+      io_error(err, "Couldn't seek file %s", file->path);
+      return false;
+    }
+    return true;
+  } else {
+    if (fseeko(file->fp, offset, whence)) {  // ci-allow
+      io_error(err, "Couldn't seek file %s", file->path);
+      return false;
+    }
+    return true;
   }
-  return true;
+
 }
 
+EM_JS(size_t, remote_tell, (int handle, int* error), {
+  const file = Module.fileHandleMap[handle];
+  if (!file) {
+    Module.HEAP32[error/4] = -1;
+    return;
+  }
+
+  Module.HEAP32[error/4] = 0;
+  return file.position;
+});
+
+
 off_t _openslide_ftell(struct _openslide_file *file, GError **err) {
-  off_t ret = ftello(file->fp);  // ci-allow
-  if (ret == -1) {
-    io_error(err, "Couldn't get offset of %s", file->path);
+  if (file->isRemote) {
+    int e;
+    off_t ret = remote_tell((int)file->fp, &e);  // ci-allow
+    if (ret < 0) {
+      io_error(err, "Couldn't get offset of %s", file->path);
+    }
+    return ret;
+  } else {
+    off_t ret = ftello(file->fp);  // ci-allow
+    if (ret == -1) {
+      io_error(err, "Couldn't get offset of %s", file->path);
+    }
+    return ret;
   }
-  return ret;
 }
 
+EM_JS(size_t, remote_size, (int handle, int* error), {
+    const file = Module.fileHandleMap[handle];
+  if (!file) {
+    Module.HEAP32[error/4] = -1;
+    return;
+  }
+
+  Module.HEAP32[error/4] = 0;
+  return file.size;
+});
+
 off_t _openslide_fsize(struct _openslide_file *file, GError **err) {
   off_t orig = _openslide_ftell(file, err);
   if (orig == -1) {
@@ -199,14 +385,40 @@ off_t _openslide_fsize(struct _openslide_file *file, GError **err) {
   return ret;
 }
 
+EM_JS(void, remote_close, (int handle, int* error), {
+  const file = Module.fileHandleMap[handle];
+  if (!file) {
+    Module.HEAP32[error/4] = -1;
+    return;
+  }
+  delete Module.fileHandleMap[handle];
+});
+
+EM_JS(void, remote_exists, (const char* path, int* error), {
+  console.log('(remote_exists)')
+});
+
+/** End emscripten callbacks  **/
+
 void _openslide_fclose(struct _openslide_file *file) {
-  fclose(file->fp);  // ci-allow
-  g_free(file->path);
-  g_free(file);
+  if (file->isRemote) {
+    int e;
+    remote_close((int) file->fp, &e);
+  } else {
+    fclose(file->fp);  // ci-allow
+    g_free(file->path);
+    g_free(file);
+  }
 }
 
 bool _openslide_fexists(const char *path, GError **err G_GNUC_UNUSED) {
-  return g_file_test(path, G_FILE_TEST_EXISTS);  // ci-allow
+  if (has_http_prefix(path)) {
+    int e;
+    remote_open(path, &e);
+    return e > 0;
+  } else {
+    return g_file_test(path, G_FILE_TEST_EXISTS); 
+  }
 }
 
 struct _openslide_dir *_openslide_dir_open(const char *dirname, GError **err) {
diff --git a/src/openslide-vendor-aperio.c b/src/openslide-vendor-aperio.c
index 42101c1..018e50d 100644
--- a/src/openslide-vendor-aperio.c
+++ b/src/openslide-vendor-aperio.c
@@ -272,7 +272,6 @@ static bool aperio_detect(const char *filename G_GNUC_UNUSED,
                 "TIFF is not tiled");
     return false;
   }
-
   // check ImageDescription
   const char *tagval = _openslide_tifflike_get_buffer(tl, 0,
                                                       TIFFTAG_IMAGEDESCRIPTION,
diff --git a/src/openslide.c b/src/openslide.c
index f0132ef..586a5a3 100644
--- a/src/openslide.c
+++ b/src/openslide.c
@@ -136,7 +136,6 @@ static const struct _openslide_format *detect_format(const char *filename,
 
     g_assert(format->name && format->vendor &&
              format->detect && format->open);
-
     if (format->detect(filename, tl, &tmp_err)) {
       // success!
       if (tl_OUT) {
@@ -204,7 +203,6 @@ static const char **strv_from_hashtable_keys(GHashTable *h) {
 
 openslide_t *openslide_open(const char *filename) {
   g_assert(openslide_was_dynamically_loaded);
-
   // detect format
   g_autoptr(_openslide_tifflike) tl = NULL;
   const struct _openslide_format *format = detect_format(filename, &tl);
@@ -220,7 +218,6 @@ openslide_t *openslide_open(const char *filename) {
   osr->associated_images = g_hash_table_new_full(g_str_hash, g_str_equal,
                                                  g_free,
                                                  destroy_associated_image);
-
   // refuse to run on unpatched pixman 0.38.x
   static GOnce pixman_once = G_ONCE_INIT;
   g_once(&pixman_once, verify_pixman_works, NULL);
@@ -231,7 +228,6 @@ openslide_t *openslide_open(const char *filename) {
     _openslide_propagate_error(osr, tmp_err);
     return g_steal_pointer(&osr);
   }
-
   // open backend
   g_autoptr(_openslide_hash) quickhash1 = _openslide_hash_quickhash1_create();
   GError *tmp_err = NULL;
@@ -268,7 +264,6 @@ openslide_t *openslide_open(const char *filename) {
       return NULL;
     }
   }
-
   // set hash property
   const char *hash_str = _openslide_hash_get_string(quickhash1);
   if (hash_str != NULL) {
@@ -276,7 +271,6 @@ openslide_t *openslide_open(const char *filename) {
                         g_strdup(OPENSLIDE_PROPERTY_NAME_QUICKHASH1),
                         g_strdup(hash_str));
   }
-
   // set other properties
   g_hash_table_insert(osr->properties,
                       g_strdup(OPENSLIDE_PROPERTY_NAME_VENDOR),
